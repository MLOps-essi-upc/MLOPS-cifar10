# -*- coding: utf-8 -*-
"""quick-dataset-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/visual-layer/fastdup/blob/main/examples/quick-dataset-analysis.ipynb

[![image](https://raw.githubusercontent.com/visual-layer/visuallayer/main/imgs/vl_horizontal_logo.png)](https://www.visual-layer.com)
"""

!pip install fastdup -Uq

"""Now, test the installation by printing out the version. If there's no error message, we are ready to go!"""

import fastdup
fastdup.__version__

"""## Download Dataset
"""
!pip install datasets
from datasets import load_dataset
# Load the CIFAR-10 dataset from Hugging Face
dataset = load_dataset("cifar10")
# Access the dataset and get its train split (or any desired split)
data = dataset["train"]

# You can print information about the dataset and access the data as needed
print(f"Number of samples: {len(data)}")
print(f"Features: {data.features}")

"""## Run fastdup

Once the extraction completes, we can run fastdup on the images.

For that let's create a `fastdup` object and specify the input directory which points to the folder of images.
"""

# Define an output directory to save the CIFAR-10 images
output_dir = "cifar10_images"

# Create the output directory if it doesn't exist
import os
os.makedirs(output_dir, exist_ok=True)

# Save the CIFAR-10 images to the output directory
for i, example in enumerate(data):
    image = example['img']
    image.save(os.path.join(output_dir, f"image_{i}.png"))

fd = fastdup.create(input_dir="cifar10_images/")

"""The `.create` method also has an optional `work_dir` parameter which specifies the directory to store artifacts from the run.

You can optionally run `fastdup.create(work_dir="my_work_dir/", input_dir="images/")` if you'd like to store the artifacts in a specific working directory.
"""

fd.run()

"""## View Run Summary"""

fd.summary()

"""## Invalid Images
From the logs printed above, we see there are no invalid images. These refer to broken images that cannot be read.

You can get a list of broken images with:
"""

fd.invalid_instances()

"""## Duplicate/Near-duplicates

One of the lowest hanging fruits in cleaning a dataset is finding and eliminating duplicates.

fastdup provides a handy way of visualizing duplicates/near-duplicates using the `duplicates_gallery` method. The `Distance` value indicates how visually similar are the image pairs in the gallery. A `Distance` of `1.0` indicates an exact copy and vice-versa.
"""

fd.vis.duplicates_gallery()

"""## Outliers

Similar to duplicate pairs, you can visualize potential outliers in your dataset with:
"""

fd.vis.outliers_gallery()

"""## Dark, Bright and Blurry Images

fastdup also lets you visualize images from your dataset using statistical metrics.

For example, with `metric='dark'` we can visualize the darkest images from the dataset.
"""

fd.vis.stats_gallery(metric='dark')

fd.vis.stats_gallery(metric='bright')

fd.vis.stats_gallery(metric='blur')

"""## Image Clusters

One of fastdup's coolest feature is visualizing image clusters. In the previous section we saw how to visualize similar image pairs. In this section we group similar looking image (or even duplicates) as a cluster and visualize them in gallery.

To do so, simply run:

> **Note**: fastdup uses default parameter values when creating image clusters. Depending on your data and use case, the best value may vary. Read more [here](https://visual-layer.readme.io/docs/dataset-cleanup) on how to change parameter values to cluster images.
"""

fd.vis.component_gallery()